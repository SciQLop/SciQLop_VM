# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  config.vm.provider :libvirt do |libvirt|
    libvirt.memory = "4096"
    libvirt.cpus = 8
  end
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     yum update -y
     yum install -y epel-release wget zlib-devel
     yum install -y /usr/bin/7z meson /usr/include/uuid/uuid.h /usr/include/GL/gl.h centos-release-scl fontconfig libX11 pulseaudio-libs-glib2
     yum install -y devtoolset-9
     yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm
     yum install -y git cmake3 python3-devel python3-setuptools python3-wheel 
     cd /tmp
     wget --quiet  http://ftp2.nluug.nl/languages/qt/development_releases/prebuilt/libclang/libclang-release_60-linux-Rhel7.2-gcc5.3-x86_64-clazy.7z
     7z x libclang-release_60-linux-Rhel7.2-gcc5.3-x86_64-clazy.7z
     mv libclang /opt/libclang_60
  SHELL
  config.vm.provision "shell",privileged:false, inline: <<-SHELL
    CFLAGS="-std=gnu99" pip3 install --user cuteci numpy spwc qtconsole pyinstaller
    $HOME/.local/bin/cuteci --rm --installer http://download.qt.io/official_releases/qt/5.12/5.12.2/qt-opensource-linux-x64-5.12.2.run install --destdir $HOME/Qt --packages qt.qt5.5122.gcc_64
    mkdir $HOME/SciQLOP_build
    cd $HOME/SciQLOP_build
    git clone https://code.qt.io/pyside/pyside-setup
    cd pyside-setup 
    git checkout 5.12.6
    source /opt/rh/devtoolset-9/enable
    export LLVM_INSTALL_DIR=/opt/libclang_60
    python3 setup.py install --qmake=$HOME/Qt/5.12.2/gcc_64/bin/qmake --parallel=8  --cmake=/usr/bin/cmake3 --user
    cd $HOME/SciQLOP_build
    git clone --recursive --branch=PySide2 https://github.com/SciQLop/SciQLop
    cd SciQLop
    LIBRARY_PATH=/opt/libclang_60/lib/ LD_LIBRARY_PATH=/opt/libclang_60/lib/ PATH=$HOME/Qt/5.12.2/gcc_64/bin/:$HOME/.local/bin:$PATH meson . build 
    cd build
    LIBRARY_PATH=/opt/libclang_60/lib/ LD_LIBRARY_PATH=/opt/libclang_60/lib/ ninja -j 4
    echo 'LD_LIBRARY_PATH=/opt/libclang_60/lib/:$HOME/Qt/5.12.2/gcc_64/lib/ python3 main.py' > $HOME/SciQLOP_build/SciQLop/build/app/PySide2-bindings/start.sh
    cd $HOME/SciQLOP_build/SciQLop/build/app/PySide2-bindings/
    $HOME/.local/bin/pyinstaller --name="SciQLop" --windowed  --hidden-import=spwc --hidden-import=numpy --add-data=$HOME/Qt/5.12.2/gcc_64/plugins/platforms:platforms --add-data=plugins:plugins main.py
  SHELL
end
